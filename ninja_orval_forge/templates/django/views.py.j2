from ninja import Router, Query, Path, Body
from django.shortcuts import get_object_or_404
from django.db.models import Q
from typing import List, Optional
import logging

from {{ app_name }}.models import {{ model_class }}
from .schema import (
    {{ model_name }}Schema,
    {% if list_enabled %}{{ model_name }}ListSchema,{% endif %}
    {% if create_enabled %}{{ model_name }}CreateSchema,{% endif %}
    {% if update_enabled %}{{ model_name }}UpdateSchema,{% endif %}
)
from {{ app_name }}.apis.ninja.base_schemas import (
    PaginationQuery,
    MessageResponseSchema,
    ErrorResponseSchema,
)
from {{ app_name }}.apis.ninja.shared.pagination_utils import PaginatorResponseBuilder
{% if permissions_enabled %}
from {{ app_name }}.apis.ninja.permissions import {{ permission_classes | join(', ') }}
{% endif %}

logger = logging.getLogger(__name__)

# tagsはOrvalがAPIClient生成時に生成先フォルダ名として使われる
router = Router(tags=["{{ tag_name }}"])

{% if list_enabled %}
@router.get(
    "/{{ resource_path }}",
    response={{ '{200: ' + model_name + 'ListSchema, 400: ErrorResponseSchema}' }},
    summary="{{ model_name }}一覧取得",
    description="{{ list_description }}",
)
{% if permissions_enabled %}
@{{ list_permission }}
{% endif %}
def list_{{ function_name }}(
    request,
    {% for path_param in path_params %}
    {{ path_param.name }}: {{ path_param.type }} = Path(..., description="{{ path_param.description }}"),
    {% endfor %}
    pagination: Query[PaginationQuery],
    {% for filter in list_filters %}
    {{ filter.name }}: Optional[{{ filter.type }}] = Query(None, description="{{ filter.description }}"),
    {% endfor %}
):
    """{{ model_name }}の一覧を取得します"""
    try:
        queryset = {{ model_class }}.objects.all()
        
        {% if path_filters %}
        # パスパラメータでのフィルタリング
        {% for filter in path_filters %}
        queryset = queryset.filter({{ filter.query_expression }})
        {% endfor %}
        {% endif %}
        
        {% if list_filters %}
        # クエリパラメータでのフィルタリング
        {% for filter in list_filters %}
        if {{ filter.name }}:
            queryset = queryset.filter({{ filter.query_expression }})
        {% endfor %}
        {% endif %}
        
        # ソート
        queryset = queryset.order_by({{ default_ordering }})
        
        # ページネーション
        total_count = queryset.count()
        paginated_qs = PaginatorResponseBuilder.paginate_queryset(queryset, pagination)
        
        # レスポンス構築
        results = [
            {{ model_name }}Schema.model_validate(item).model_dump()
            for item in paginated_qs
        ]
        
        return 200, PaginatorResponseBuilder.build_response(total_count, results)
        
    except Exception as e:
        logger.error(f"Error in list_{{ function_name }}: {str(e)}")
        return 400, {"error": "データの取得に失敗しました"}
{% endif %}

{% if retrieve_enabled %}
@router.get(
    "/{{ resource_path }}/{id}",
    response={{ '{200: ' + model_name + 'Schema, 404: ErrorResponseSchema}' }},
    summary="{{ model_name }}詳細取得",
    description="{{ retrieve_description }}",
)
{% if permissions_enabled %}
@{{ retrieve_permission }}
{% endif %}
def get_{{ function_name }}(
    request,
    {% for path_param in path_params %}
    {{ path_param.name }}: {{ path_param.type }} = Path(..., description="{{ path_param.description }}"),
    {% endfor %}
    id: int = Path(..., description="{{ model_name }}のID"),
):
    """{{ model_name }}の詳細を取得します"""
    try:
        {% if path_filters %}
        obj = get_object_or_404(
            {{ model_class }},
            id=id,
            {% for filter in path_filters %}
            {{ filter.query_expression }},
            {% endfor %}
        )
        {% else %}
        obj = get_object_or_404({{ model_class }}, id=id)
        {% endif %}
        return 200, {{ model_name }}Schema.model_validate(obj).model_dump()
    except {{ model_class }}.DoesNotExist:
        return 404, {"error": "指定されたリソースが見つかりません"}
    except Exception as e:
        logger.error(f"Error in get_{{ function_name }}: {str(e)}")
        return 400, {"error": "データの取得に失敗しました"}
{% endif %}

{% if create_enabled %}
@router.post(
    "/{{ resource_path }}",
    response={{ '{201: ' + model_name + 'Schema, 400: ErrorResponseSchema}' }},
    summary="{{ model_name }}作成",
    description="{{ create_description }}",
)
{% if permissions_enabled %}
@{{ create_permission }}
{% endif %}
def create_{{ function_name }}(
    request,
    {% for path_param in path_params %}
    {{ path_param.name }}: {{ path_param.type }} = Path(..., description="{{ path_param.description }}"),
    {% endfor %}
    payload: Body[{{ model_name }}CreateSchema],
):
    """新しい{{ model_name }}を作成します"""
    try:
        data = payload.model_dump()
        {% if path_params %}
        # パスパラメータを追加
        {% for param in path_params %}
        {% if param.field_name %}
        data["{{ param.field_name }}"] = {{ param.name }}
        {% endif %}
        {% endfor %}
        {% endif %}
        
        obj = {{ model_class }}.objects.create(**data)
        return 201, {{ model_name }}Schema.model_validate(obj).model_dump()
    except Exception as e:
        logger.error(f"Error in create_{{ function_name }}: {str(e)}")
        return 400, {"error": "作成に失敗しました", "detail": str(e)}
{% endif %}

{% if update_enabled %}
@router.patch(
    "/{{ resource_path }}/{id}",
    response={{ '{200: ' + model_name + 'Schema, 404: ErrorResponseSchema}' }},
    summary="{{ model_name }}更新",
    description="{{ update_description }}",
)
{% if permissions_enabled %}
@{{ update_permission }}
{% endif %}
def update_{{ function_name }}(
    request,
    {% for path_param in path_params %}
    {{ path_param.name }}: {{ path_param.type }} = Path(..., description="{{ path_param.description }}"),
    {% endfor %}
    id: int = Path(..., description="{{ model_name }}のID"),
    payload: Body[{{ model_name }}UpdateSchema],
):
    """{{ model_name }}を更新します"""
    try:
        {% if path_filters %}
        obj = get_object_or_404(
            {{ model_class }},
            id=id,
            {% for filter in path_filters %}
            {{ filter.query_expression }},
            {% endfor %}
        )
        {% else %}
        obj = get_object_or_404({{ model_class }}, id=id)
        {% endif %}
        
        update_data = payload.model_dump(exclude_unset=True)
        
        for field, value in update_data.items():
            setattr(obj, field, value)
        
        obj.save()
        return 200, {{ model_name }}Schema.model_validate(obj).model_dump()
    except {{ model_class }}.DoesNotExist:
        return 404, {"error": "指定されたリソースが見つかりません"}
    except Exception as e:
        logger.error(f"Error in update_{{ function_name }}: {str(e)}")
        return 400, {"error": "更新に失敗しました", "detail": str(e)}
{% endif %}

{% if delete_enabled %}
@router.delete(
    "/{{ resource_path }}/{id}",
    response={{ '{204: None, 404: ErrorResponseSchema}' }},
    summary="{{ model_name }}削除",
    description="{{ delete_description }}",
)
{% if permissions_enabled %}
@{{ delete_permission }}
{% endif %}
def delete_{{ function_name }}(
    request,
    {% for path_param in path_params %}
    {{ path_param.name }}: {{ path_param.type }} = Path(..., description="{{ path_param.description }}"),
    {% endfor %}
    id: int = Path(..., description="{{ model_name }}のID"),
):
    """{{ model_name }}を削除します"""
    try:
        {% if path_filters %}
        obj = get_object_or_404(
            {{ model_class }},
            id=id,
            {% for filter in path_filters %}
            {{ filter.query_expression }},
            {% endfor %}
        )
        {% else %}
        obj = get_object_or_404({{ model_class }}, id=id)
        {% endif %}
        
        obj.delete()
        return 204, None
    except {{ model_class }}.DoesNotExist:
        return 404, {"error": "指定されたリソースが見つかりません"}
    except Exception as e:
        logger.error(f"Error in delete_{{ function_name }}: {str(e)}")
        return 400, {"error": "削除に失敗しました", "detail": str(e)}
{% endif %}