from typing import Sequence, Union, Dict, Any, List
from django.http import JsonResponse
from {{ app_name }}.apis.ninja.pydantic.common_schema import PaginationQuery
from pydantic import BaseModel


class PaginatorResponseBuilder:
    """
    DRFのLimitOffsetPaginationのように整形するためのクラス
    
    Django Ninjaでページネーション機能を提供し、
    レスポンスを統一された形式で返却します。
    """

    @staticmethod
    def paginate_queryset(queryset, pagination: PaginationQuery):
        """
        DRFのLimitOffsetPaginationのように
        URLクエリパラメータから取得したlimitとoffsetを元に
        クエリセットを分割して返すメソッド
        
        Args:
            queryset: Djangoクエリセット
            pagination: ページネーションパラメータ
            
        Returns:
            分割されたクエリセット
        """
        limit = min(pagination.limit, {{ max_page_size }})  # 最大ページサイズ制限
        return queryset[pagination.offset : pagination.offset + limit]

    @staticmethod
    def build_response(
        total_count: int,
        results: Sequence[Union[BaseModel, dict]],
        **kwargs: Any
    ) -> Dict[str, Any]:
        """
        ページネーションレスポンスを構築
        
        Args:
            total_count: 総件数
            results: 結果リスト
            **kwargs: 追加のレスポンスフィールド
            
        Returns:
            ページネーションレスポンス辞書
        """
        # Pydanticモデルを辞書に変換
        serialized = [
            {% if camel_case_enabled %}
            PaginatorResponseBuilder._convert_to_camel_case(
                item.model_dump(by_alias=True) if isinstance(item, BaseModel) else item
            )
            {% else %}
            item.model_dump() if isinstance(item, BaseModel) else item
            {% endif %}
            for item in results
        ]

        response = {
            "count": total_count,
            "results": serialized,
        }
        
        # 追加フィールド
        if kwargs:
            response.update(kwargs)
            
        return response

    {% if camel_case_enabled %}
    @staticmethod
    def _convert_to_camel_case(data: Any) -> Any:
        """
        スネークケースのキーをキャメルケースに変換
        
        Args:
            data: 変換対象のデータ
            
        Returns:
            キャメルケースに変換されたデータ
        """
        if isinstance(data, dict):
            return {
                PaginatorResponseBuilder._to_camel_case(k): PaginatorResponseBuilder._convert_to_camel_case(v)
                for k, v in data.items()
            }
        elif isinstance(data, list):
            return [PaginatorResponseBuilder._convert_to_camel_case(item) for item in data]
        return data

    @staticmethod
    def _to_camel_case(snake_str: str) -> str:
        """
        スネークケースをキャメルケースに変換
        
        Args:
            snake_str: スネークケース文字列
            
        Returns:
            キャメルケース文字列
        """
        components = snake_str.split('_')
        return components[0] + ''.join(x.title() for x in components[1:])
    {% endif %}

    @staticmethod
    def create_json_response(data: Dict[str, Any]) -> JsonResponse:
        """
        UTF-8エンコーディングでJSONレスポンスを作成
        
        Args:
            data: レスポンスデータ
            
        Returns:
            JsonResponse
        """
        return JsonResponse(
            data,
            json_dumps_params={"ensure_ascii": False},  # 日本語文字化け防止
            content_type="application/json; charset=utf-8",
        )